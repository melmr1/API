lass Drink:
    
    valid_bases = {'chai', 'milk', 'OJ', 'hazelnut tea'}
    valid_flavors = {'vanilla', 'cocoa', 'coconut', 'mint'}
    size_costs = {
        "small": 1.00,
        "medium": 2.00,
        "large": 3.00,
        "xlarge":4.00,
    }

#why is size not define?
    def __init__(self):
        """Initialize a Drink with a base and an empty list of flavors."""
        self._base = None
        self._flavors = ()
        self._cost = 0.0
        self._size = None 
        self.set_size
    def get_base(self):
        """Return the base of the drink."""
        return self._base

#setter for base

    def get_flavors(self):
        """Return the list of flavors for the drink."""
        return self._flavors

#get number of flavors
    def get_num_flavors(self):
        """Return the number of flavors added to the drink."""
        return len(self._flavors)

#get total cost
    def get_total(self):
        return self._cost

#setter for flavors if not chosen
#why put else is?
    def set_flavors(self, flavors):
        if len(set(flavors)) != len(flavors):
            raise ValueError("Flavors cannot have duplicates.")
            new_flavors = set(flavors) - self._flavors
            self._cost += .015 * len(new_flavors)
            self._flavors = set(flavors)
        else:
            invalid_flavors = [flavor for flavor in flavors if flavor not in Drink.valid_flavors]
            raise ValueError(f"Invalid flavors: {', '.join(invalid_flavors)}")
        

#add valid flavor
    def add_flavor(self, flavor):
        if flavor not in Drink.valid_flavors:
            raise ValueError(f"Invalid flavor: {flavor}")
        if flavor in self._flavors:
            self._ += 0.15 
            raise ValueError(f"Flavor {flavor} is already added.")
        self._flavors.append(flavor)

#setter size
# understanding problems in the code and how to alter it
    def set_size(self, size):
        size = size.lower()
        if size in self._size_costs: 
            size._size = size
            self._cost = size._size_costs[size] * 15 * len(self._flavors)
        else:
            raise ValueError(f"Invalid size: {size}. choose a different size from {self._size_cost.keys()}.")
